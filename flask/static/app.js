/*** Scriot to handel getting and processing data from the backend* @author Nathan Stevens* @version 1.0*/// set the root urlvar root = location.protocol + '//' + location.host;console.log("Root", root)// global Grid.js objectvar myGrid;// capture button eventsd3.selectAll("button").on("click", function() {    // Create a variable for the button selected    let button = d3.select(this);            let value = button.property("value");    console.log("Button Value:", value);        if(value == "get_estimate") {      getEstimate();    } else {      getGeneralEstimate(value);    }});// function to update the mapfunction getEstimate() {  let zipcode = d3.select("#zip_input").property("value");  let house_sqft = d3.select("#house_option option:checked").text();  let kwh = d3.select("#kwh_option option:checked").text();  let ecar = d3.select("#solar_option option:checked").text();    if(house_sqft != 'N/A') {    let ekwh = 0.0135*parseInt(house_sqft) + 18.7;    kwh = Math.ceil(ekwh*30); // average monthly kw hours  }    let message = "Zip: " + zipcode + ", Power: " + kwh + " kwh, eCar: " + ecar;    console.log("Estimate:", message);    // let user know what drg was selected    d3.select("#estimate_info").text(message);    // convert to kw by deviding by 9 hours of daylight  let kw = (kwh/(30*9)).toFixed(1)    // load the data then call the function to show the returned data  let url = root + "/api/v1.0/estimate/" + zipcode + "/" + kw + "/" + ecar;    d3.json(url).then(function (data) {    console.log(data)        let min = Math.min.apply(Math, data.Est_Cost);    let max = Math.max.apply(Math, data.Est_Cost);        d3.select("#lowest").text("Min ($" + min.toLocaleString() + ")");    d3.select("#highest").text("Max ($" + max.toLocaleString() + ")");        showEstimates(data);  });    // clean out the div which may contain a grid.js table  document.getElementById('gtable').innerHTML = "";  if(myGrid) {    delete myGrid;  }}// us d3 to load the difinitions from the backendfunction getGeneralEstimate(kwh) {  let url = root + "/api/v1.0/definitions/" + kwh  console.log("General Estimate: ", kwh);    /**  // Perform a GET request to the query URL.  d3.json(url).then(function (data) {    // clear the select drop down    let dropDown = d3.select("#drg_option");    //dropDown.html(""); // clear it        let htmlText = "";    data.forEach(item => {      htmlText += "<option value=\"" + item.value + "\">" + item.text + "</option>";    });    dropDown.html(htmlText);  });  */}// display provider information for the selected statefunction showEstimates(data) {  let estimateData = [];    // create the data array  for(let i = 0; i < data.Service_City.length; i++) {    let estimate = [];        estimate[0] = data.Service_City[i];    estimate[1] = data.Installer_Name[i];    estimate[2] = data.Installation_Count[i];    estimate[3] = data.Avg_Size_AC[i];    estimate[4] = data.Avg_Cost[i];    estimate[5] = data.My_Size_AC[i];    estimate[6] = data.ECar[i];    estimate[7] = data.Est_Cost[i];        estimateData.push(estimate);  }  // create the new grid.js table or update the existing one  if(!myGrid) {    let columnNames = ["City", "Installer", "Count", "Avg KW",                        "Avg Cost", "My KW", "eCar", "Estimate"];        myGrid = new gridjs.Grid({      columns: columnNames,      sort: true,      data: estimateData    }).render(document.getElementById("gtable"));  } else {    myGrid.updateConfig({      data: estimateData    }).forceRender();  }}