/*** Scriot to handel getting and processing data from the backend* @author Nathan Stevens* @version 1.0*/// set the root urlvar root = location.protocol + '//' + location.host;console.log("Root", root)// set the global drgIdvar drgId = "";// global Grid.js objectvar myGrid;// capture button eventsd3.selectAll("button").on("click", function() {    // Create a variable for the button selected    let button = d3.select(this);            let value = button.property("value");    console.log("Button Value:", value);        if(value == "get_estimate") {      getEstimate();    } else {      getGeneralEstimate(value);    }});// function to update the mapfunction getEstimate() {  let zipcode = d3.select("#zip_input").property("value");  let house_sqft = d3.select("#house_option option:checked").text();  let kwh = d3.select("#kwh_option option:checked").text();  let technology = d3.select("#solar_option option:checked").text();    if(house_sqft != 'N/A') {    let ekwh = 0.0135*parseInt(house_sqft) + 18.7;    kwh = Math.ceil(ekwh*30); // average monthly kw hours  }    let message = "Getting Estimate: " + zipcode + ", " + house_sqft +                 ", " + kwh + ", " + technology;    console.log("Estimate:", message);    // let user know what drg was selected    d3.select("#estimate_info").text(message);        // load the data then call the function create new map  let url = root + "/api/v1.0/estimate/" + zipcode + "/" + kwh + "/" + technology;    d3.json(url).then(function (data) {    console.log(data)        /**    let min = 100000000;    let minState = "MIN";    let max = 0;    let maxState = "MAX";           for (let k in data) {      item = data[k];            if(item.avg_payments < min) {        min = item.avg_payments;        minState = item.state;      }            if(item.avg_payments > max) {        max = item.avg_payments;        maxState = item.state;      }     }        d3.select("#lowest").text(minState + " ($" + min.toLocaleString() + ")");    d3.select("#highest").text(maxState + " ($" + max.toLocaleString() + ")");    */  });    // clean out the div which may contain a grid.js table  document.getElementById('gtable').innerHTML = "";  if(myGrid) {    delete myGrid;  }}// us d3 to load the difinitions from the backendfunction getGeneralEstimate(kwh) {  let url = root + "/api/v1.0/definitions/" + kwh  console.log("General Estimate: ", kwh);    /**  // Perform a GET request to the query URL.  d3.json(url).then(function (data) {    // clear the select drop down    let dropDown = d3.select("#drg_option");    //dropDown.html(""); // clear it        let htmlText = "";    data.forEach(item => {      htmlText += "<option value=\"" + item.value + "\">" + item.text + "</option>";    });    dropDown.html(htmlText);  });  */}// display provider information for the selected statefunction showProviders(stateData) {  // clean out the div with grid.js table first to avoid error  //document.getElementById('gtable').innerHTML = "";    let providerData = [];    stateData.forEach(provider => {    let data = [provider.name,                 provider.discharges,                 "$" + provider.avg_payments.toLocaleString(),                 "$" + provider.avg_medicare.toLocaleString(),                 "$" + provider.avg_difference.toLocaleString()]        providerData.push(data);  });    console.log("Table Data:", providerData);    // create the new grid.js table or update the existing one  if(!myGrid) {    let columnNames = ["Provider", "Patients", "Avg Payment", "Avg Medicare", "Difference"]    myGrid = new gridjs.Grid({      columns: columnNames,      sort: true,      data: providerData    }).render(document.getElementById("gtable"));  } else {    myGrid.updateConfig({      data: providerData    }).forceRender();  }}